---
- name: Install distributed etcd database.
  hosts: linode
  become: yes

  tasks:  
  - name: Check for etcd install.
    stat:
      path: /usr/local/bin/etcd
    register: etcd

  - name: Check for etcdctl install.
    stat:
      path: /usr/local/bin/etcdctl
    register: etcdctl
  
  - name: Create etcd directory.
    file:
      path: /home/{{ ansible_ssh_user }}/etcd-install-temp
      state: directory
    when: not etcd
  
  - name: Download and extract etcd binaries.
    unarchive:
      src: https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{ node_arch }}.tar.gz
      dest: /home/{{ ansible_ssh_user }}/etcd-install-temp/
      remote_src: yes
    when: not etcd

  - name: Allow Architecture.
    lineinfile:
      path: /home/{{ ansible_ssh_user }}/.profile
      line: export ETCD_UNSUPPORTED_ARCH=arm64
    when: 
      - node_arch == "arm64"
      - not etcd

  - name: Allow Architecture for root.
    lineinfile:
      path: /etc/environment
      line: ETCD_UNSUPPORTED_ARCH=arm64
    when: 
      - node_arch == "arm64"
      - not etcd

  - name: Move etcd binary to '/usr/local/bin'.
    copy:
      src: /home/{{ ansible_ssh_user }}/etcd-install-temp/etcd-{{ etcd_version }}-linux-arm64/etcd
      dest: /usr/local/bin/etcd
      remote_src: yes
      mode: u+x,g+x,o+x
    when: not etcd
  
  - name: Move etcdctl binary to '/usr/local/bin'.
    copy:
      src: /home/{{ ansible_ssh_user }}/etcd-install-temp/etcd-{{ etcd_version }}-linux-arm64/etcdctl
      dest: /usr/local/bin/etcdctl
      remote_src: yes
      mode: u+x,g+x,o+x
    when: not etcd

  - name: Remove temp install directory.
    file:
      path: /home/{{ ansible_ssh_user }}/etcd-install-temp
      state: absent
    when: not etcd

  - name: Create 'etcd' directory on nodes.
    file:
      path: /etc/etcd
      state: directory

  - name: Create certificates locally.
    shell: echo '{"CN":"CA","key":{"algo":"rsa","size":2048}}' | cfssl gencert -initca - | cfssljson -bare ca -
    delegate_to: localhost

  - name: Create certificate config locally.
    shell: echo '{"signing":{"default":{"expiry":"43800h","usages":["signing","key encipherment","server auth","client auth"]}}}' > ca-config.json
    delegate_to: localhost

  - name: Create certs for each node locally.
    shell: echo '{"CN":"{{ node_hostname }}","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="{{ ansible_host }},{{ node_hostname }}" - | cfssljson -bare {{ node_hostname }}
    delegate_to: localhost

  - name: Modify file permissions before copying.
    shell: chmod go+r *-key.pem
    delegate_to: localhost

  - name: Copy 'etcd-ca.crt' to all hosts.
    copy:
      src: ./ca.pem
      dest: /etc/etcd/etcd-ca.crt
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"

  - name: Copy 'server.crt' to all hosts.
    copy:
      src: ./{{ node_hostname }}.pem
      dest: /etc/etcd/server.crt
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"

  - name: Copy 'server.key' to all hosts.
    copy:
      src: ./{{ node_hostname }}-key.pem
      dest: /etc/etcd/server.key
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: '0600'