---
- name: Install distributed etcd database.
  hosts: cluster
  become: yes

  tasks:  
  - name: Install needed packages.
    apt:
      name: golang-cfssl
      state: latest
  
  - name: Check for etcd install.
    stat:
      path: /usr/local/bin/etcd
    register: etcd

  - name: Check for etcdctl install.
    stat:
      path: /usr/local/bin/etcdctl
    register: etcdctl
  
  - name: Create etcd directory.
    file:
      path: /home/{{ ansible_ssh_user }}/etcd-install-temp
      state: directory
    when: not etcd
  
  - name: Download and extract etcd binaries.
    unarchive:
      src: https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{ node_arch }}.tar.gz
      dest: /home/{{ ansible_ssh_user }}/etcd-install-temp/
      remote_src: yes
    when: not etcd

  - name: Allow Architecture.
    lineinfile:
      path: /home/{{ ansible_ssh_user }}/.profile
      line: export ETCD_UNSUPPORTED_ARCH=arm64
    when: 
      - node_arch == "arm64"
      - not etcd

  - name: Allow Architecture for root.
    lineinfile:
      path: /etc/environment
      line: ETCD_UNSUPPORTED_ARCH=arm64
    when: 
      - node_arch == "arm64"
      - not etcd

  - name: Move etcd binary to '/usr/local/bin'.
    copy:
      src: /home/{{ ansible_ssh_user }}/etcd-install-temp/etcd-{{ etcd_version }}-linux-arm64/etcd
      dest: /usr/local/bin/etcd
      remote_src: yes
      mode: u+x,g+x,o+x
    when: not etcd
  
  - name: Move etcdctl binary to '/usr/local/bin'.
    copy:
      src: /home/{{ ansible_ssh_user }}/etcd-install-temp/etcd-{{ etcd_version }}-linux-arm64/etcdctl
      dest: /usr/local/bin/etcdctl
      remote_src: yes
      mode: u+x,g+x,o+x
    when: not etcd

  - name: Remove temp install directory.
    file:
      path: /home/{{ ansible_ssh_user }}/etcd-install-temp
      state: absent
    when: not etcd

  - name: Create etcd certificate directory.
    file:
      path: /home/{{ ansible_ssh_user }}/certs
      state: directory

  - name: Create certificates only on first node.
    shell: 
      cmd: echo '{"CN":"CA","key":{"algo":"rsa","size":2048}}' | cfssl gencert -initca - | cfssljson -bare ca -
      chdir: /home/{{ ansible_ssh_user }}/certs
    when: node_hostname == 'node1'

  - name: Create certificate config only on first node.
    shell:
      cmd: echo '{"signing":{"default":{"expiry":"43800h","usages":["signing","key encipherment","server auth","client auth"]}}}' > ca-config.json
      chdir: /home/{{ ansible_ssh_user }}/certs
    when: node_hostname == 'node1'


#  - name: Create certs for each node.
#    shell: 
#      cmd: echo '{"CN":"{{ node_hostname }}","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="{{ ansible_host }},#{{ node_hostname }}" - | cfssljson -bare {{ node_hostname }}
#      chdir: /home/{{ ansible_ssh_user }}/certs
#  when: node_hostname == 'node1'      

  
 
  
  - name: Show all the hosts
    shell:
      cmd: echo "{{ item.key }} of {{ item.value }}" >> /home/{{ ansible_ssh_user }}/testfile
    with_dict: "{{ nodeVars }}"
    when: node_hostname == 'node1'
  
  
